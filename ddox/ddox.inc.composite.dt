- import std.algorithm;
- import std.meta : AliasSeq;
- import std.string : toLower;
- import ddox.api;
- import ddox.highlight;

- void outputCompositePrototype(CompositeTypeDeclaration item)
  - auto cls_item = cast(ClassDeclaration)item;
  - auto intf_item = cast(InterfaceDeclaration)item;

  | <span class="kwd">#{item.kind.to!string.toLower()}</span> <span class="typ">#{item.name}</span>
  - info.renderTemplateArgs(&_diet_output, item);

  - bool first = true;
  - void outputBase(CachedType tp)
    - if (tp.typeName.among("Object", "object.Object"))
      - return;
    | !{first ? "<br>&nbsp;&nbsp;: " : "<br>&nbsp;&nbsp;, "}!{info.formatType(tp, false)}
    - first = false;

  - if (cls_item && (cls_item.baseClass || cls_item.derivedInterfaces.length > 0))
    - if (cls_item.baseClass)
      - outputBase(cls_item.baseClass);
    - foreach (intf; cls_item.derivedInterfaces)
      - outputBase(intf);

  - if (intf_item && intf_item.derivedInterfaces.length > 0)
    - foreach (intf; intf_item.derivedInterfaces)
      - outputBase(intf);

  - if (item.templateConstraint.length > 0)
    | #[br]&nbsp;&nbsp;
    - if (item.templateConstraint.length > 0)
      br
      | <span class="kwd">if</span> <span class="pun">(</span>!{highlightDCode(item.templateConstraint)}<span class="pun">);</span>

- void outputCompositeMembers(CompositeTypeDeclaration item, int hlevel)
  - alias kinds = AliasSeq!(InterfaceDeclaration, ClassDeclaration, StructDeclaration, UnionDeclaration, EnumDeclaration, AliasDeclaration, TemplateDeclaration);
  - static const kindnames =      ["Inner interfaces", "Inner classes", "Inner structs", "Unions", "Enums", "Aliases", "Templates"];
  - static const kindnames_sing = ["Inner interface",  "Inner class",   "Inner struct",  "Union",  "Enum",  "Alias",   "Template"];

  - void outputType(CachedType type)
    - if (type.typeName[].endsWith("Signal"))
      code.prettyprint.lang-d
        != "<a href=\"" ~ info.linkTo(type.typeDecl) ~ "\"><span class=\"typ\">Signal</a>!(...)"
    - else if (type.typeName[].endsWith("Listener"))
      code.prettyprint.lang-d
        != "<a href=\"" ~ info.linkTo(type.typeDecl) ~ "\"><span class=\"typ\">Listener</a>!(...)"
    - else
      != info.formatType(type)

  - VariableDeclaration[] fields;
  - FunctionDeclaration[] properties, methods, constructors;
  - FunctionDeclaration[] staticProperties, staticMethods;
  - uint inheritedFieldsCount, inheritedPropertiesCount, inheritedMethodsCount;

  - if (hasChild!VariableDeclaration(item))
    - fields = getChildren!VariableDeclaration(item);
    - foreach (ref f; fields)
      - if (f.inheritingDecl)
        - inheritedFieldsCount++;
        - f = null;
    - fields = fields.remove!(f => f is null);

  - foreach (fn; getDocGroups!FunctionDeclaration(item))
    - if (fn.hasAttribute("@property"))
      - if (fn.inheritingDecl)
        - inheritedPropertiesCount++;
      - else if (fn.hasAttribute("static"))
        - staticProperties ~= fn;
      - else
        - properties ~= fn;
    - else if (fn.name != "this")
      - if (fn.inheritingDecl)
        - inheritedMethodsCount++;
      - else if (fn.hasAttribute("static"))
        - staticMethods ~= fn;
      - else
        - methods ~= fn;
    - else
      - constructors ~= fn;

  - if (constructors.length > 0)
    section
      - heading(hlevel, "Constructors");
      table
        tr
          th.name Name
          th Description
        - foreach (p; constructors)
          tr
            td.name
              a(href="#{info.linkTo(p)}", class=declStyleClasses(p))
                code= p.name
              span.tableEntryAnnotation (#{p.parameters.map!(param => param.name[]).joiner(", ")})
            td!= info.formatDoc(p.docGroup, 3, sec => sec == "$Short")

  - if (fields.length > 0 || inheritedFieldsCount > 0)
    section
      - heading(hlevel, "Fields");
      - if (fields.length > 0)
        table
          tr
            th.type Type
            th.name Name
            th Description
          - foreach (f; fields)
            tr
              td.type
                - outputType(f.type);
              td.name
                a(href="#{info.linkTo(f)}", class=declStyleClasses(f)) <code>#{f.name}</code>
              td!= info.formatDoc(f.docGroup, 3, sec => sec == "$Short")
      - if (inheritedFieldsCount > 0)
        p.inherited= inheritedFieldsCount.to!string ~ " inherited fields"

  - if (properties.length > 0 || inheritedPropertiesCount > 0)
    section
      - heading(hlevel, "Properties");
      - if (properties.length > 0)
        table
          tr
            th.type Type
            th.name Name
            th Description
          - foreach (p; properties)
            - auto mems = p.docGroup ? p.docGroup.members : [cast(Entity)p];
            tr
              td.type
                - outputType(getPropertyType(mems));
              td.name
                a(href="#{info.linkTo(p)}", class=declStyleClasses(p)) <code>#{p.name}</code>
                span.tableEntryAnnotation!= anyPropertyGetter(mems) ? anyPropertySetter(mems) ? "[get,&nbsp;set]" : "[get]" : "[set]"
              td!= info.formatDoc(p.docGroup, 3, sec => sec == "$Short")
      - if (inheritedPropertiesCount > 0)
        p.inherited= inheritedPropertiesCount.to!string ~ " inherited properties"

  - if (staticProperties.length > 0)
    section
      - heading(hlevel, "Static properties");
      table
        tr
          th.type Type
          th.name Name
          th Description
        - foreach (p; staticProperties)
          - auto mems = p.docGroup ? p.docGroup.members : [cast(Entity)p];
          tr
            td.type
              - outputType(getPropertyType(mems));
            td.name
              a(href="#{info.linkTo(p)}", class=declStyleClasses(p)) <code>#{p.name}</code>
              span.tableEntryAnnotation!= anyPropertyGetter(mems) ? anyPropertySetter(mems) ? "[get,&nbsp;set]" : "[get]" : "[set]"
            td!= info.formatDoc(p.docGroup, 3, sec => sec == "$Short")

  - if (methods.length > 0 || inheritedMethodsCount > 0)
    section
      - heading(hlevel, "Methods");
      - if (methods.length > 0)
        table
          tr
            th.name Name
            th Description
          - foreach (m; methods)
            tr
              td.name
                a(href="#{info.linkTo(m)}", class=declStyleClasses(m))
                  code= m.name
                span.tableEntryAnnotation (#{m.parameters.map!(param => param.name[]).joiner(", ")})
              td!= info.formatDoc(m.docGroup, 3, sec => sec == "$Short")
      - if (inheritedMethodsCount > 0)
        p.inherited= inheritedMethodsCount.to!string ~ " inherited methods"

  - if (staticMethods.length > 0)
    section
      - heading(hlevel, "Static methods");
      table
        tr
          th.name Name
          th Description
        - foreach (m; staticMethods)
          tr
            td.name
              a(href="#{info.linkTo(m)}", class=declStyleClasses(m))
                code= m.name
              span.tableEntryAnnotation (#{m.parameters.map!(param => param.name[]).joiner(", ")})
            td!= info.formatDoc(m.docGroup, 3, sec => sec == "$Short")

  - foreach (i, kind; kinds)
    - if (hasChild!kind(item))
      section
        - heading(hlevel, kindnames[i]);
        table
          tr
            th.name Name
            th Description
          - foreach (grp; getDocGroups!kind(item))
            tr
              td.name
                a(href="#{info.linkTo(grp)}", class=declStyleClasses(grp))
                  code= grp.name
              td!= info.formatDoc(grp.docGroup, 3, sec => sec == "$Short")
